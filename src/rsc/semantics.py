# -*- coding: utf-8 -*-

import struct
from tools import split_bits, strip_0


class RscSemanticObject(object):

    def __init__(self):
        self.errors = []
        self.code = None
        self.connected_labels = []

    @staticmethod
    def parse(data):
        record = RscSemanticObject()
        record.parse_record(data)
        return record

    def info(self):
        print u'Semantic Object [%s] <%s> "%s"' % (
            self.code,
            self.short_name,
            self.name,
        )

    def parse_record(self, data):
        """2.1.3 Структура таблицы семантик классификатора
        Таблица семантик классификатора находится по смещению на таблицу семантик, имеет общую длину, указанную в заголовке
        классификатора. Перед таблицей семантик классификатора находится идентификатор таблицы “.SEM”
        (шестнадцатеричное число 0X004D4553)  (не входит в длину таблицы).
        Записи таблицы семантики постоянной длины, 84 байт. Одна запись на одну семантику классификатора."""

        # Назначение поля Смещение    Длина   Комментарий
        # Код семантики   0   4   Неизменяемый уникальный
        self.code = struct.unpack('<I', data[0:4])[0]
        
        # Тип значения семантики  4   2
        # 1. Тип значения семантики  (1 байт):
        # 0х00 - символьная строка,
        # 0х01 - числовое значение или значение в виде числового кода из классификатора значений
        # 0х09 - имя файла зарегистрированного типа
        # 0х0А - имя файла BMP
        # 0x0B - имя файла, обрабатываемого OLE-сервером
        # 0x0C - ссылка на произвольный объект карты (уникальный номер объекта)
        # 0x0D - имя файла-паспорта района
        # 0x0E - имя текстового файла
        # 0x0F - имя файла PCX
        self.semantic_type = struct.unpack('<h', data[4:6])[0]

        # Повторяемость семантики 6   1   1 - у объекта может быть несколько значений семантики с таким кодом
        self.repeatable = struct.unpack('<B', data[6:7])[0]

        # Признак служебной семантики 7   1   1 - семантику можно использовать для всех объектов классификатора
        self.staff_semantic = struct.unpack('<B', data[7:8])[0]

        # Название    8   32  ANSI
        self.name = strip_0(struct.unpack('<32s', data[8:40])[0]).decode('cp1251')

        # Короткое имя семантики 40 16 Уникальное символьное имя (ANSI). Используется для подписей полей в базах данных
        self.short_name = strip_0(struct.unpack('<16s', data[40:56])[0]).decode('cp1251')

        # Единица измерения   56  8   ANSI
        self.unit = strip_0(struct.unpack('<8s', data[56:64])[0]).decode('cp1251')

        # Размер поля семантики   64  2   Число от 0 до 255
        self.field_size = struct.unpack('<h', data[64:66])[0]

        # Точность семантики  66  1   Количество цифр после запятой (при выводе)
        self.accuracy = struct.unpack('<B', data[66:67])[0]

        # Флаг    67  1   2 семантика составная
        self.is_complex_semantic = struct.unpack('<B', data[67:68])[0]

        # Смещение на описание классификатора семантики   68  4   От начала файла Если нет записей – 0
        self.semantic_classifier_offset = struct.unpack('<I', data[68:72])[0]

        # Количество записей в классификаторе данной семантики    72  4   Если нет записей – 0
        self.semantic_classifier_records = struct.unpack('<I', data[72:76])[0]

        # Смещение на умалчиваемые значения семантики 76  4   От начала файла Если нет записей – 0.
        self.semantic_defaults_offset = struct.unpack('<I', data[76:80])[0]

        # Количество записей для умалчиваемых значений    80  4   Если нет записей – 0
        self.semantic_defaults_records = struct.unpack('<I', data[80:84])[0]

        # ИТОГО:  84 байта

        # 2. В классификаторе существуют зарезервированные коды семантических характеристик:
        # 32800 - классификационный код объекта,
        # 32801 - признак объекта, имеющего ссылку на подчиненный объект,
        # 32802 - признак объекта, на который имеется ссылка от главного объекта,
        # 32803 - признак объекта, входящего в группу равноправных объектов,
        # 32804 - ссылка на подпись от объекта,
        # 32805 - ссылка на объект от подписи,
        # 32810 - короткое имя слоя объекта,
        # 32811 - короткое имя объекта (ключ),
        # 91000000l - внешний код рамки листа.
